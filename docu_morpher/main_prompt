Project Title: Perfect PDF-to-Word Conversion App
1.0 Overview
build an application capable of converting PDF documents into Word documents. The application must be able to extract both images and text from the PDF and place them accurately in the Word document, maintaining the original layout.

2.0 Features and Functionality
The application must:

Extract text from PDF files
Extract images from PDF files
Maintain the layout of the original PDF in the Word document
Handle multi-page PDF documents
Extract text from images (OCR)
Recognize and properly place non-text elements (e.g., emojis) in the Word document
3.0 Technologies
The application should be built using Python and utilize the following libraries:

PyMuPDF for PDF parsing
python-docx for Word document creation
Tesseract (pytesseract) for OCR
spaCy or NLTK for natural language processing
An external image recognition API (like Google Cloud Vision or Amazon Rekognition)
4.0 Architecture
The application should follow a modular architecture with separate modules for PDF parsing, image recognition, OCR, text processing, layout analysis, and Word document generation. This will allow us to update or replace individual modules without affecting the rest of the application.

finish and improove following code:

check the following code:


main.py
from pdf_parser import PDFParser
from ocr_processor import OCRProcessor
from image_recognizer import ImageRecognizer
from text_processor import TextProcessor
from layout_analyzer import LayoutAnalyzer
from word_generator import WordGenerator


def main():
    # Implementation here

    if __name__ == "__main__":
        main()


image_recognizer.py
from typing import List
import requests


class ImageRecognizer:
    def __init__(self, api_key: str):
        self.api_key = api_key

    def recognize_elements(self, images: List[bytes]) -> List[List[str]]: 
        # Implementation here

layout_analyzer.py
from typing import List, Tuple


class LayoutAnalyzer:
    def __init__(self, layout_data: List[Tuple[float, float, float, float]]):
        self.layout_data = layout_data

    def analyze_layout(self) -> List[Tuple[int, int]]:
        # Implementation here

ocr_processor.py
from typing import List
import pytesseract
from PIL import Image


class OCRProcessor:
    def __init__(self):
        pytesseract.pytesseract.tesseract_cmd = r'/usr/local/bin/tesseract'

    def perform_ocr(self, images: List[bytes]) -> List[str]:
        # Implementation here

pdf_parser.py
import fitz  # PyMuPDF
from typing import List, Tuple


class PDFParser:
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.doc = fitz.open(file_path)

    def extract_text(self) -> List[str]:
        # Implementation here

    def extract_images(self) -> List[Tuple[int, bytes]]:
        # Implementation here

    def extract_layout(self) -> List[Tuple[float, float, float, float]]:
        # Implementation here

text_processor.py
from typing import List
import spacy


class TextProcessor:
    def __init__(self):
        self.nlp = spacy.load("en_core_web_sm")

    def process_text(self, text: List[str]) -> List[str]:
        # Implementation here

word_generator.py
from typing import List, Tuple
from docx import Document


class WordGenerator:
    def __init__(self, output_file: str):
        self.output_file = output_file
        self.doc = Document()

    def create_word_document(self, text_data: List[str], layout_data: List[Tuple[int, int]]) -> None:
        # Implementation here
